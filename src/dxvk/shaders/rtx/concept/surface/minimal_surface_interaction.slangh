/*
* Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

#include "rtx/concept/ray/ray_utilities.h"

// Minimal Surface Interaction Functions

MinimalSurfaceInteraction minimalSurfaceInteractionCreate(GBufferMemoryMinimalSurfaceInteraction gBufferMemoryMinimalSurfaceInteraction)
{
  MinimalSurfaceInteraction minimalSurfaceInteraction;

  const uint32_t packedTriangleTBN =
    floatBitsToUint(gBufferMemoryMinimalSurfaceInteraction.encodedWorldPositionWorldTriangleTBN.w);
  const f16vec4 quaternion = uint32ToQuaternion(packedTriangleTBN);

  minimalSurfaceInteraction.position = gBufferMemoryMinimalSurfaceInteraction.encodedWorldPositionWorldTriangleTBN.xyz;
  minimalSurfaceInteraction.positionError = gBufferMemoryMinimalSurfaceInteraction.positionError;
  minimalSurfaceInteraction.triangleTangent = quaternionToTangent(quaternion);
  minimalSurfaceInteraction.triangleBitangent = quaternionToBitangent(quaternion);
  minimalSurfaceInteraction.triangleNormal = quaternionToNormal(quaternion);
  return minimalSurfaceInteraction;
}

MinimalSurfaceInteraction minimalSurfaceInteractionAffineTransform(MinimalSurfaceInteraction minimalSurfaceInteraction, mat4 transformMatrix)
{
  minimalSurfaceInteraction.position = (mul(transformMatrix, vec4(minimalSurfaceInteraction.position, 1))).xyz;
  minimalSurfaceInteraction.positionError = max(minimalSurfaceInteraction.positionError, calculatePositionError(minimalSurfaceInteraction.position));
  minimalSurfaceInteraction.triangleNormal = f16vec3(mul(mat3(transformMatrix), vec3(minimalSurfaceInteraction.triangleNormal)));
  minimalSurfaceInteraction.triangleTangent = f16vec3(mul(mat3(transformMatrix), vec3(minimalSurfaceInteraction.triangleTangent)));
  minimalSurfaceInteraction.triangleBitangent = f16vec3(mul(mat3(transformMatrix), vec3(minimalSurfaceInteraction.triangleBitangent)));
  return minimalSurfaceInteraction;
}
